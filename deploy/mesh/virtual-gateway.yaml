apiVersion: v1
kind: Namespace
metadata:
  name: apps
  labels:
    mesh: apps
    gateway: ingress-gw
    appmesh.k8s.aws/sidecarInjectorWebhook: enabled
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: Mesh
metadata:
  name: apps
spec:
  namespaceSelector:
    matchLabels:
      mesh: apps
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-gw
  namespace: apps
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ingress-gw
  template:
    metadata:
      labels:
        app: ingress-gw
    spec:
      serviceAccountName: sa-envoy-access
      containers:
        - name: envoy
          image: 840364872350.dkr.ecr.us-east-2.amazonaws.com/aws-appmesh-envoy:v1.21.1.2-prod
          ports:
            - containerPort: 8088
---
apiVersion: v1
kind: Service
metadata:
  name: ingress-gw
  namespace: apps
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: external
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
    service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 8088
      name: http
  selector:
    app: ingress-gw
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualGateway
metadata:
  name: ingress-gw
  namespace: apps
spec:
  namespaceSelector:
    matchLabels:
      gateway: ingress-gw
  podSelector:
    matchLabels:
      app: ingress-gw
  listeners:
    - portMapping:
        port: 8088
        protocol: http
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: GatewayRoute
metadata:
  name: gateway-route-paths
  namespace: apps
spec:
  httpRoute:
    match:
      prefix: "/"
    action:
      target:
        virtualService:
          virtualServiceRef:
            name: color-paths
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualNode
metadata:
  name: green
  namespace: apps
spec:
  podSelector:
    matchLabels:
      app: color
      version: green
  listeners:
    - portMapping:
        port: 80
        protocol: http
      healthCheck:
        protocol: http
        path: '/ping'
        healthyThreshold: 2
        unhealthyThreshold: 2
        timeoutMillis: 2000
        intervalMillis: 5000
  serviceDiscovery:
    dns:
      hostname: color-green.apps.svc.cluster.local
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualRouter
metadata:
  namespace: apps
  name: color-paths
spec:
  listeners:
    - portMapping:
        port: 80
        protocol: http
  routes:
    - name: color-route-green
      priority: 100
      httpRoute:
        match:
          prefix: /
        action:
          weightedTargets:
            - virtualNodeRef:
                name: green
              weight: 100
        timeout:
          perRequest:
             value: 10
             unit: s
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualService
metadata:
  name: color-paths
  namespace: apps
spec:
  awsName: color-paths.apps.svc.cluster.local
  provider:
    virtualRouter:
      virtualRouterRef:
        name: color-paths
---
apiVersion: v1
kind: Service
metadata:
  name: color-green
  namespace: apps
  labels:
    app: node-ws
spec:
  ports:
    - port: 80
      name: http
  selector:
    app: color
    version: green
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: green
  namespace: apps
spec:
  replicas: 1
  selector:
    matchLabels:
      app: color
      version: green
  template:
    metadata:
      labels:
        app: color
        version: green
      annotations:
        appmesh.k8s.aws/mesh: apps
    spec:
      serviceAccountName: sa-envoy-access
      containers:
        - name: app
          image: 293014077452.dkr.ecr.us-east-2.amazonaws.com/node-ws:latest
          ports:
            - containerPort: 80