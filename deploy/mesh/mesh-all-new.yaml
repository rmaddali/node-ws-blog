apiVersion: v1
kind: Namespace
metadata:
  name: node-ws-ns-2
  labels:
    mesh: node-ws-mesh
    gateway: ingress-gw
    appmesh.k8s.aws/sidecarInjectorWebhook: enabled
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: Mesh
metadata:
  name: node-ws-mesh
spec:
  namespaceSelector:
    matchLabels:
      mesh: node-ws-mesh
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualGateway
metadata:
  name: ingress-gw
  namespace: node-ws-ns-2
spec:
  namespaceSelector:
    matchLabels:
      gateway: ingress-gw
  podSelector:
    matchLabels:
      app: ingress-gw
  listeners:
    - portMapping:
        port: 8088
        protocol: http
  logging:
    accessLog:
      file:
        path: /dev/stdout
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: GatewayRoute
metadata:
  name: gateway-route-path
  namespace: node-ws-ns-2
spec:
  httpRoute:
    match:
      prefix: "/"
    action:
      target:
        virtualService:
          virtualServiceRef:
            name: node-ws-path-vs
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualService
metadata:
  name: node-ws-path-vs
  namespace: node-ws-ns-2
spec:
  meshName: node-ws-mesh
  awsName: node-ws-path-vs.node-ws-ns-2.svc.cluster.local
  provider:
    virtualRouter:
      virtualRouterRef:
        name: node-ws-path
        namespace: node-ws-ns-2
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualRouter
metadata:
  namespace: node-ws-ns-2
  name: node-ws-path
spec:
  meshName: node-ws-mesh
  listeners:
    - portMapping:
        port: 80
        protocol: http
  routes:
    - name: mesh-node-ws-route1
      priority: 100
      httpRoute:
        match:
          prefix: /
        action:
          weightedTargets:
            - virtualNodeRef:
                name: ws-server
              weight: 100
        timeout:
          perRequest:
             value: 300
             unit: s
---
apiVersion: appmesh.k8s.aws/v1beta2
kind: VirtualNode
metadata:
  name: ws-server
  namespace: node-ws-ns-2
spec:
  meshName: node-ws-mesh
  podSelector:
    matchLabels:
      app: node-js
  listeners:
    - portMapping:
        port: 80
        protocol: http
      healthCheck:
        protocol: http
        path: '/'
        healthyThreshold: 2
        unhealthyThreshold: 2
        timeoutMillis: 2000
        intervalMillis: 5000
  serviceDiscovery:
    dns:
      hostname: ws-server.node-ws-ns-2.svc.cluster.local
---
apiVersion: v1
kind: Service
metadata:
  name: node-ws
  namespace: node-ws-ns-2
spec:
  ports:
    - port: 80
      name: http
  selector:
    app: node-js
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: node-ws
  namespace: node-ws-ns-2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: node-js
  template:
    metadata:
      annotations:
        appmesh.k8s.aws/mesh: node-ws-mesh
        appmesh.k8s.aws/virtualNode: ws-server
      labels:
        app: node-js
    spec:
      serviceAccountName: sa-envoy-access
      containers:
        - name: node-ws
          image: {{IMAGE_REPO}}/node-ws:latest
          ports:
            - containerPort: 80
          env:
            - name: "COLOR"
              value: "green"
---
apiVersion: v1
kind: Service
metadata:
  name: ingress-gw
  namespace: node-ws-ns-2
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 8088
      name: http
  selector:
    app: ingress-gw
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-gw
  namespace: node-ws-ns-2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingress-gw
  template:
    metadata:
      annotations:
        appmesh.k8s.aws/mesh: node-ws-mesh
        appmesh.k8s.aws/virtualNode: ws-server
      labels:
        app: ingress-gw
    spec:
      serviceAccountName: sa-envoy-access
      containers:
        - name: envoy
          image: 840364872350.dkr.ecr.us-west-1.amazonaws.com/aws-appmesh-envoy:v1.21.1.2-prod
          ports:
            - containerPort: 8088























